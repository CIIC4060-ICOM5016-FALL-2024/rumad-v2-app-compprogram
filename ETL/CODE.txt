-------CREATION OF THE DOCKER CONTAINER--------------------------------------------------------------------------------------------------------------------
-- C:\Users\Estudiante> & docker run --name DB_Class `
-- >>   -e POSTGRES_PASSWORD=tito123 `
-- >>   -p 5432:5432 `
-- >>   -e POSTGRES_USER=tito `
-- >>   -e POSTGRES_DB=DBProject `
-- >>   -v "C:\Users\Estudiante\Desktop\University\Sexto_Year\Semester_1\DB\Project\Data:/var/lib/postgresql/data" `
-- >>   -d `
-- >>   postgres

-- CREATE EXTENSION IF NOT EXISTS vector; --CREATING THE VECTOR DATATYPE

----CREATION OF THE TABLES-----------------------------------------------------------------------------------------------------------------------


-- CREATE TABLE  CLASS(cid serial PRIMARY KEY ,cname varchar(100),ccode varchar(100),cdesc TEXT,
-- term varchar(100),years varchar(100),cred int, csyllabus TEXT);
-- CREATE TABLE ROOM(rid serial Primary Key, building varchar(100),room_number varchar(100), capacity int);
-- CREATE TABLE MEETING(mid serial Primary Key, ccode varchar(100),starttime TIME,endtime TIME, cdays varchar(5));
-- CREATE TABLE requisite (
--     classid INTEGER REFERENCES class(cid),
--     reqid INTEGER REFERENCES class(cid),
--     prereq BOOLEAN,
--     PRIMARY KEY (classid, reqid)
-- );

-- CREATE TABLE SECTION(sid serial Primary key,roomid int references Room(rid),
--                      cid int references Class(cid),mid int references MEETING(mid),
--                     semester varchar(100),years varchar(100),capacity int);

---------------------------------------------------------------------------------------------------------------------------
-------UPLOADING THE DATA INTO THE TABLES CALLED MEETING, CLASS AND ROOM--------------------------------------------------------------------------------------------------------------------

-- COPY meeting
-- FROM '/var/lib/postgresql/data/project_data/meeting.csv'
-- DELIMITER ','
-- CSV HEADER;

-- COPY class (cid,cname,ccode,cdesc,term,years,cred,csyllabus)
-- FROM '/var/lib/postgresql/data/project_data/courses.csv'
-- DELIMITER ','
-- CSV HEADER;

-- COPY room(rid,building, room_number, capacity)
-- FROM '/var/lib/postgresql/data/project_data/rooms.csv'
-- DELIMITER ','
-- CSV HEADER;

-- SELECT cid FROM class
-- WHERE cid = 26;
---------------------------------------------------------------------------------------------------------------------------

-------UPLOADING AND FILTERING THE DATA FOR THE TABLE REQUISITE-------------------------------------------------------------------------------------------------------------

-- CREATE TEMPORARY TABLE REQ(classid INTEGER,
--     reqid INTEGER ,
--     prereq BOOLEAN,
--     PRIMARY KEY (classid, reqid));

-- COPY REQ
-- FROM '/var/lib/postgresql/data/project_data/requisites.csv'
-- DELIMITER ','
-- CSV HEADER;


-- INSERT INTO requisite(CLASSID, REQID, PREREQ)
-- SELECT DISTINCT REQ.CLASSID,REQ.REQID,REQ.PREREQ
-- FROM REQ
-- INNER JOIN CLASS
-- ON REQ.CLASSID = CLASS.cid
-- WHERE REQ.PREREQ IS NOT NULL AND REQ.reqid IN (SELECT cid FROM CLASS) AND REQ.REQID > 1 AND REQ.CLASSID > 1;


-- DROP TABLE REQ;
----------------------------------------------------------------------------------------------------------------------

-------UPLOADING AND FILTERING THE DATA FOR THE TABLE SECTION-------------------------------------------------------------------------------------------------------------

-- CREATE TEMPORARY TABLE  SEC(sid INT,roomid int,
--                      cid int ,mid int ,
--                     semester varchar(100),years varchar(100),capacity int);

-- -- SECTIONS.CSV cid AND mid COLUMNS NEED TO BE SWAPPED
-- COPY SEC
-- FROM '/var/lib/postgresql/data/project_data/sections.csv'
-- DELIMITER ','
-- CSV HEADER;

-- SELECT * FROM section
-- WHERE cid = 26;


-- INSERT INTO SECTION (sid, roomid, cid, mid, semester, years, capacity)
-- SELECT SEC.sid, SEC.roomid, SEC.cid, SEC.mid, SEC.semester, SEC.years, SEC.capacity
-- FROM SEC
-- INNER JOIN meeting ON meeting.MID = SEC.MID
-- INNER JOIN CLASS ON SEC.CID = CLASS.cid
-- INNER JOIN ROOM ON ROOM.RID = SEC.Roomid;


-- drop table sec;
----------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------QUERIES FOR CLEANING DATA PHASE I-------------------------------------------------


---------------------------------------------------------ALL THE CLASSES DATA STARTS WITH ID GREATER OR EQUAL TO  2------------------------------------

-- select * from requisite
-- where classid < 2 or reqid < 2;

-- select * from class
-- where cid < 2;


-- SELECT * FROM section
-- WHERE CID < 2;
------------------------------------------------------------------------------------------------------------------------------
-- THERE CANNOT BE TWO SECTION.SID WITH THE SAME SID

-- select sid from section
-- group by sid
-- having count(*) > 1;
------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------TWO SECTIONS CANNOT BE TAUGHT AT THE SAME TIME IN THE SAME CLASSROOM AS LONG AS THEY ARE IN THE SAME SEMESTER AND SAME YEAR------------------------------

--TO THE SHADOW REALM AND BACK AGAIN   
/*--------------------------------IF A SECTION IS TAUGHT AT THE SAME TIME AND THE SAME CLASSROOM, REMOVE THE ONE WITH THE BIGGER SID------------------------------------------------------------------------------*/

-- WITH left_query AS(
-- /*Gives me the minimum sid of all of them*/
-- SELECT MIN(section.sid) as excluded_sid FROM section
-- INNER JOIN (
-- /*query for looking at duplicate sections that have the same semester, year, and room.*/
-- SELECT meeting.mid, section.semester, section.years, room.room_number, count(*) as duplicates FROM meeting
-- INNER JOIN section
-- ON meeting.mid = section.mid
-- INNER JOIN room
-- ON section.roomid = room.rid
-- GROUP BY meeting.mid, section.semester, section.years, room.room_number
-- HAVING COUNT(*) > 1
-- ORDER BY duplicates DESC

-- ) AS meet
-- ON section.mid = meet.mid
-- WHERE section.semester = meet.semester AND section.years = meet.years
-- GROUP BY meet.mid
-- HAVING COUNT(*) > 1
-- ), right_query AS (
-- SELECT section.sid FROM section
-- INNER JOIN (
-- /*QUERY FOR ALL THE SIDs that are duplicates*/
-- SELECT meeting.mid, section.semester, section.years, room.room_number, count(*) as duplicates FROM meeting
-- INNER JOIN section
-- ON meeting.mid = section.mid
-- INNER JOIN room
-- ON section.roomid = room.rid
-- GROUP BY meeting.mid, section.semester, section.years, room.room_number
-- HAVING COUNT(*) > 1
-- ORDER BY duplicates DESC

-- ) AS meet
-- ON section.mid = meet.mid
-- WHERE section.semester = meet.semester AND section.years = meet.years
-- )

-- /* B - A, where B are all sections that have duplicate semester, years, meeting, and room, AND A are the minimum sids of those. */
-- DELETE FROM section
-- WHERE sid IN (SELECT right_query.sid
-- FROM right_query 
-- EXCEPT
-- SELECT left_query.excluded_sid
-- FROM left_query);

--------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------NO CLASS BETWEEN 10:15:00 AND 11:59:00 , ALSO NO CLASS AFTER 19:45 (MJ) ---------------------------------------

-- UPDATE meeting --ADD 30 MORE MINUTES TO EVERY STARTTIME AND ENDTIME AFTER 13:45:00
-- SET STARTTIME = STARTTIME + INTERVAL '00:30:00', --NOW THE MOST EARLY TIME AFTER '13:45:00' IS '02:00:00'
-- ENDTIME = ENDTIME + INTERVAL '00:30:00'
-- WHERE starttime BETWEEN '13:00:00' AND '19:45:00' AND CDAYS = 'MJ';


-- UPDATE meeting -- CHANGE SCHEDULE FROM STARTTIME = 12:00:00 AND ENDTIME = 13:15:00 TO STARTTIME 12:30:00 AND ENDTIME 13:45:00
-- SET starttime = '12:30:00', ENDTIME = '13:45:00'
-- WHERE starttime BETWEEN '12:00:00' AND '12:50:00' AND CDAYS = 'MJ';


-- DELETE FROM SECTION WHERE SECTION.MID IN (SELECT MID FROM meeting --DELETE MEETINGS WHERE TIME  IS BETWEEN 10:15 AM TO 11:59 AM MJ
-- WHERE (starttime BETWEEN '10:15:00' AND '11:59:00' AND CDAYS = 'MJ') OR (((starttime > '19:00:00' OR ENDTIME > '19:45:00') AND CDAYS = 'MJ'))); 

-- ----starttime added on the second or clause along the specification of it being on the 'MJ' days

-- DELETE FROM MEETING --DELETE MEETINGS WHERE TIME  IS GREATER THAN 19:45 MJ
-- WHERE (starttime BETWEEN '10:15:00' AND '11:59:00' AND CDAYS = 'MJ') OR (((starttime > '19:00:00' OR ENDTIME > '19:45:00') AND CDAYS = 'MJ'));

-- --starttime added on the second or clause along the specification of it being on the 'MJ' days

------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------COURSES MUST BE TAUGH IN THE CORRECT YEAR AND SEMESTER---------------------------------


-- DELETE FROM SECTION --EVALUATING CORRECT SEMESTER AND TERM OF FALL
-- WHERE SECTION.SID IN (SELECT SID FROM SECTION
-- INNER JOIN CLASS
-- on class.cid = section.cid
-- WHERE (semester = 'Fall' AND term = 'Second Semester'));


-- DELETE FROM SECTION --EVALUATING CORRECT SEMESTER AND TERM OF SPRING
-- WHERE SID IN (SELECT SID FROM SECTION
-- INNER JOIN CLASS
-- on class.cid = section.cid
-- WHERE (SEMESTER = 'Spring' AND term = 'First Semester'));

-- DELETE FROM section
-- WHERE SID IN (SELECT SECTION.SID FROM section --EVALUATING EVEN YEARS
-- INNER JOIN CLASS
-- ON CLASS.CID = SECTION.cid
-- WHERE CLASS.YEARS = 'Even Years' AND SECTION.years::INTEGER % 2 <> 0);

-- DELETE FROM section
-- WHERE SID IN (SELECT section.SID FROM section --EVALUATING EVEN YEARS
-- INNER JOIN CLASS
-- ON CLASS.CID = SECTION.cid
-- WHERE CLASS.YEARS = 'Odd Years' AND SECTION.years::INTEGER % 2 = 0);


---------------------------------------------------------ERASE SECTION WITH GREATER CAPACITY THAN ROOM_CAPACITY---------------------------------------

-- DELETE FROM section
-- WHERE SID IN (SELECT SID FROM section
-- INNER JOIN room
-- ON ROOM.RID = SECTION.roomid
-- WHERE section.capacity > ROOM.capacity);



/*-------------------------- TOTAL NUMBER OF ROWS ON ALL TABLES ---------------*/
-- SELECT SUM(counts) as total_count
-- FROM(
--     SELECT COUNT(*) AS counts FROM class
--     UNION ALL 
--     SELECT COUNT(*) AS counts FROM meeting
--     UNION ALL  
--     SELECT COUNT(*) AS counts FROM requisite
--     UNION ALL 
--     SELECT COUNT(*) AS counts FROM room
--     UNION ALL 
--     SELECT COUNT(*) AS counts FROM section);
    
--------------------------------------------------------------------------------------

/*------------------------------Local Statistics------------------------------------------------------*/
--------------------------------Top 3 rooms with the most capacity-------------------------------
-- SELECT room_number, capacity
-- FROM ROOM
-- ORDER BY capacity DESC
-- LIMIT 3;

-- --------------------------------Top 3 sections with the most student-to-capacity ratio.----------------

-- SELECT room_number, (section.capacity::Float)/(room.capacity::Float) * 100  as student_to_capacity_ratio
-- FROM section
-- INNER JOIN room
-- ON room.rid = section.roomid
-- ORDER BY student_to_capacity_ratio DESC
-- LIMIT 3;

-- ------------------------------------Top 3 most taught classes per semester.------------------------------------

-- SELECT class.ccode, semester, sum(section.capacity) as students
-- from class
-- INNER JOIN section 
-- on section.cid = class.cid
-- GROUP BY class.ccode, semester
-- ORDER BY students DESC 
-- LIMIT 3;


-- /*-----------------------------------Top 3 classes that were taught the most per room.---------------------------*/

-- SELECT class.ccode, room_number, sum(section.capacity) as students
-- from class
-- INNER JOIN section 
-- on section.cid = class.cid
-- INNER JOIN room
-- ON section.roomid = room.rid
-- GROUP BY class.ccode, room_number
-- ORDER BY students DESC 
-- LIMIT 3;


-- /*------------------------------------Global Statisctics-------------------------------------------------*/
-- /*------------------------------------Top 5 meetings with the most sections-----------------------------*/

-- SELECT mid, count(*) as meeting_number
-- FROM section
-- GROUP BY mid
-- ORDER BY meeting_number DESC
-- LIMIT 5 

-- /*---------------------------------------Top 3 classes that appears the most as prerequisite to other classes---------------*/


-- SELECT reqid, class.cdesc, count(*) AS class_count
-- FROM requisite
-- INNER JOIN class
-- ON reqid = class.cid
-- WHERE cdesc <> 'None'
-- GROUP BY reqid, class.cdesc
-- ORDER BY class_count DESC
-- LIMIT 3;


-- /*---------------------------------------Top 3 classes that were offered the least.---------------*/

-- SELECT class.cid, class.cdesc, count(*) as class_count
-- FROM class
-- INNER JOIN section
-- ON section.cid = class.cid
-- WHERE cdesc <> 'None'
-- GROUP BY class.cid, class.cdesc
-- ORDER BY class_count ASC
-- LIMIT 3

-- /*--------------------------------------Total number of sections per year.----------------------*/  

-- SELECT years, count(*) as sections_per_year
-- FROM section
-- GROUP BY years
-- ORDER BY years

-- DROP TABLE class, meeting, requisite, room, section